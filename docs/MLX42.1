.\" -----------------------------------------------------------------------------
.\" Copyright @ 2021-2022 Codam Coding College. All rights reserved.
.\" See copyright and license notice in the root project for more information.
.\" -----------------------------------------------------------------------------

.TH MLX42 1 "1 August, 2022" "v1.0" "Codam Coding College (42 Network)"

.\" -----------------------------------------------------------------------------
.SH NAME
MLX42 - A simple graphical interface Library for students using GLFW & OpenGL.

.\" -----------------------------------------------------------------------------
.SH SYNOPSIS
#include "MLX42/MLX42.h"

.\" Init
.nf
.I mlx_t*
.fi
.B mlx_init
(
.I int32_t width
,
.I int32_t height
,
.I const char* title
,
.I bool resize
);

.\" Loop
.nf
.I void
.fi
.B mlx_loop
(
.I mlx_t* mlx
);

.\" Terminate
.nf
.I void
.fi
.B mlx_terminate
(
.I mlx_t* mlx
);

.\" -----------------------------------------------------------------------------
.SH DESCRIPTION

MLX42 is a performant, easy to use, cross-platform windowing library to create
graphical applications without having to work directly with the native Windowing 
Framework of the given operating system.

Additionally it provides primitive tools for drawing onto the window such as
displaying images from disk or creating a drawing surface to draw pixels on.
.P
Currently supported operating systems:
.TP 20
.B Windows NT
: Windows 7 - Windows 11
.TP 20
.B MacOS
: Mojave - Monterey (Including Apple Silicon)
.TP 20
.B Linux
: Wayland / X11

.SH INITIALIZATION
The very first step for initialization is to execute the mlx_init function.
It is responsible to setup the GLFW windowing library which 
creates a connection between your software and the display. It also loads the 
OpenGL function pointers, compiling the shaders and more.

It returns a mlx_t* which is a structure containing the current window instance.
With this instance you can manipulate, hook onto and control what happens inside 
your window instance. For example you would use it to send graphical orders such as 
creating an image, which is used to display pixel data. You can also detect key
interactions such as checking if the W, A, S or D key is currently being pressed.

.TP 20
.B mlx_init
: Initialize and run a new window instance.
.TP 20
.B mlx_loop
: Keep the window open as long as a shutdown is not requested.
.TP 20
.B mlx_terminate
: Destroy and cleanup all images and mlx resources.
.P
All other MLX functions are described in the header file: 
.I
MLX42.h
.fi

.SH LINKING
In order to use the functions in MLX, you'll to link it with your application.
To do this, simply add the following arguments at the linking stage:

.TP 20
.B Windows NT
: -lglfw3 -lopengl32 -lgdi32
.TP 20
.B MacOS
: -lglfw(3) -framework Cocoa -framework OpenGL -framework IOKit
.TP 20
.B Linux
: -ldl -lglfw(3) -pthread -lm
.P
.B NOTE
: For some UNIX systems the flag for glfw might be with or without a 3 at the end.

.SH DEBUGGING
MLX was designed with ease of debugging in mind, therefor if the project is build with
.B
make DEBUG=1
it will keep in the assertion macros and notify you of any bad input given to functions.
Additionally it comes with its own runtime error checking via
.B
mlx_errno
and
.B
mlx_strerror
to properly identify what went wrong during the runtime of the library for easy debugging.

.\" -----------------------------------------------------------------------------
.SH RETURN VALUES
If mlx_init() fails to set up the connection to the graphical system, it will
return NULL, otherwise a non-null pointer is returned as a connection identifier.

.\" -----------------------------------------------------------------------------
.SH BUGS / NOTES
Currently there are no known bugs. However keep in mind while technically MLX42
does support multiple window instances it currently has no functional support for
it. That is, no proper way of handling multiple windows.

.\" -----------------------------------------------------------------------------
.SH AUTHOR
Copyright @ 2022 Codam Coding College - lde-la-h@student.codam.nl